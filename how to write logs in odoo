import logging
_logger = logging.getLogger(__name__)

		raise exceptions.ValidationError('No data to update!')
_logger.debug('Mass update on Todo Tasks %s' % self.task_ids)

_logger.debug('A DEBUG message')
_logger.info('An INFO message')
_logger.warning('A WARNING message')
_logger.error('An ERROR message')

from odoo import exceptions
raise exceptions.Warning('Warning message')
raise exceptions.ValidationError('Not valid message')


Method Decorators

Method decorators
During our journey, the several methods we encountered used API decorators
like @api.multi . These are important for the server to know how to handle the
method. Let's recap the ones available and when they should be used.
The @api.multi decorator is used to handle recordsets with the new API and is
the most frequently used. Here self is a recordset, and the method will usually
include a for loop to iterate it.
In some cases, the method is written to expect a singleton: a recordset
containing no more than one record. The @api.one decorator was deprecated as
of 9.0 and should be avoided. Instead we should still use @api.multi and add
to the method code a line with self.ensure_one() , to ensure it is a singleton.
As mentioned, the @api.one decorator is deprecated but is still supported. For
completeness, it might be worth knowing that it wraps the decorated method,
feeding it one record at a time, doing the recordset iteration for. In our
method self is guaranteed to be a singleton. The return values of each
individual method call are aggregated as a list and returned.
The @api.model decorates a class-level static method, and it does not use any
recordset data. For consistency, self is still a recordset, but its content is
irrelevant. Note that this type of method cannot be used from buttons in the user
interface.
A few other decorators have more specific purposes and are to be used together
with the decorators described earlier:
is used for computed field functions to identify
on what changes the (re)calculation should be triggered
@api.constrains(fld1,...) is used for validation functions to identify
on what changes the validation check should be triggered
@api.onchange(fld1,...) is used for on change functions to identify the
fields on the form that will trigger the action
@api.depends(fld1,...)
In particular, the onchange methods can send a warning message to the user
interface. For example, this could warn the user that the product quantity just
entered is not available in stock, without preventing the user from continuing.
This is done by having the method return a dictionary describing the warning
message:
return {
236'warning': {
'title': 'Warning!',
'message': 'You have been warned'}
}

 The server environment

The execution environment in self.env has the following attributes available:
env.cr is the database cursor being used
env.uid is the ID for the session user
env.user is the record for the current user
env.context is an immutable dictionary with a
session context
The environment also provides access to the registry where all installed models
are available. For example, self.env['res.partner'] returns a reference to
the Partners model. We can then use search() or browse() on it to retrieve
recordsets:
>>> self.env['res.partner'].search([('name', 'like', 'Ag')])
res.partner(7, 51)


python之切片操作符(Slice)  
什么是切片？

字符串、列表、元组在python中都符合“序列”这一特征，只要符合这一特征的变量我们都可以用切片(slice)去存取它们的任意部分。我们可 以把序列想像成一个队列，我可能需要前面三位、后面三位、或从第三位后的四位、或隔一个取一个等，我们用切片操作符来实现上述要求。

切片操作符在python中的原型是
[start:stop:step]

即：[开始索引:结束索引:步长值]

开始索引：同其它语言一样，从0开始。序列从左向右方向中，第一个值的索引为0,最后一个为-1

结束索引：切片操作符将取到该索引为止，不包含该索引的值。

步长值：默认是一个接着一个切取，如果为2,则表示进行隔一取一操作。步长值为正时表示从左向右取，如果为负，则表示从右向左取。步长值不能为0

假设：
li = [1,2,3,4,5,6,7]
print li[2]                      #输出3,因为索引为2的值为3
print li[2:4]                   #输出[3,4]。从索引2开始取，到索引为4的5为止(不含5)
print li[-1]                     #输出7,反向取第一个
print li[-1:-5:2]              #输出空列表[]，从反向第1个向反向第5个取，但步长为2,表示正向相隔二个取值。
print li[-1:-5:-2]            #输出[7,5]

有时我们可以省略开始索引、结束索引，如：

li = [1,2,3,4,5,6,7]
print li[1:]           #输出[2,3,4,5,6,7]，省略终止索引，表示取起始索引之后的所有值，等效于li[1:len(li)]
print li[:3]           #输出[1,2,3]，省略起始索引，表示从0开始取，等效于li[0:3]
print li[:]            #输出[1,2,3,4,5,6,7]，省略起始索引、终止索引、步长值表示取全部，等效于li[0:len(li):1]
print li[::]           #输出[1,2,3,4,5,6,7]，省略起始索引、终止索引、步长值表示取全部，等效于li[0:len(li):1]
print li[::-1]        #输出[7,6,5,4,3,2,1]，省略起始索引、终止索引，步长值为-1，表示反向获取
所以，不要为str类没有substring方法而感到困惑，用切片操作符吧。



python 占位符
百分号方式

%[(name)][flags][width].[precision]typecode

(name)      可选，用于选择指定的key
flags          可选，可供选择的值有:
+       右对齐；正数前加正好，负数前加负号；
-        左对齐；正数前无符号，负数前加负号；
空格    右对齐；正数前加空格，负数前加负号；
0        右对齐；正数前无符号，负数前加负号；用0填充空白处
width         可选，占有宽度
.precision   可选，小数点后保留的位数
typecode    必选
s，获取传入对象的__str__方法的返回值，并将其格式化到指定位置
r，获取传入对象的__repr__方法的返回值，并将其格式化到指定位置
c，整数：将数字转换成其unicode对应的值，10进制范围为 0 <= i <= 1114111（py27则只支持0-255）；字符：将字符添加到指定位置
o，将整数转换成 八  进制表示，并将其格式化到指定位置
x，将整数转换成十六进制表示，并将其格式化到指定位置
d，将整数、浮点数转换成 十 进制表示，并将其格式化到指定位置
e，将整数、浮点数转换成科学计数法，并将其格式化到指定位置（小写e）
E，将整数、浮点数转换成科学计数法，并将其格式化到指定位置（大写E）
f， 将整数、浮点数转换成浮点数表示，并将其格式化到指定位置（默认保留小数点后6位）
F，同上
g，自动调整将整数、浮点数转换成 浮点型或科学计数法表示（超过6位数用科学计数法），并将其格式化到指定位置（如果是科学计数则是e；）
G，自动调整将整数、浮点数转换成 浮点型或科学计数法表示（超过6位数用科学计数法），并将其格式化到指定位置（如果是科学计数则是E；）
%，当字符串中存在格式化标志时，需要用 %%表示一个百分号
注：Python中百分号格式化是不存在自动将整数转换成二进制表示的方式

常用格式化：

1
2
3
4
5
6
7
8
9
10
11
tpl = "i am %s" % "alex"
 
tpl = "i am %s age %d" % ("alex", 18)
 
tpl = "i am %(name)s age %(age)d" % {"name": "alex", "age": 18}
 
tpl = "percent %.2f" % 99.97623
 
tpl = "i am %(pp).2f" % {"pp": 123.425556, }
 
tpl = "i am %.2f %%" % {"pp": 123.425556, }
2、Format方式

[[fill]align][sign][#][0][width][,][.precision][type]

fill           【可选】空白处填充的字符
align        【可选】对齐方式（需配合width使用）
<，内容左对齐
>，内容右对齐(默认)
＝，内容右对齐，将符号放置在填充字符的左侧，且只对数字类型有效。 即使：符号+填充物+数字
^，内容居中
sign         【可选】有无符号数字
+，正号加正，负号加负；
 -，正号不变，负号加负；
空格 ，正号空格，负号加负；
#            【可选】对于二进制、八进制、十六进制，如果加上#，会显示 0b/0o/0x，否则不显示
，            【可选】为数字添加分隔符，如：1,000,000
width       【可选】格式化位所占宽度
.precision 【可选】小数位保留精度
type         【可选】格式化类型
传入” 字符串类型 “的参数
s，格式化字符串类型数据
空白，未指定类型，则默认是None，同s
传入“ 整数类型 ”的参数
b，将10进制整数自动转换成2进制表示然后格式化
c，将10进制整数自动转换为其对应的unicode字符
d，十进制整数
o，将10进制整数自动转换成8进制表示然后格式化；
x，将10进制整数自动转换成16进制表示然后格式化（小写x）
X，将10进制整数自动转换成16进制表示然后格式化（大写X）
传入“ 浮点型或小数类型 ”的参数
e， 转换为科学计数法（小写e）表示，然后格式化；
E， 转换为科学计数法（大写E）表示，然后格式化;
f ， 转换为浮点型（默认小数点后保留6位）表示，然后格式化；
F， 转换为浮点型（默认小数点后保留6位）表示，然后格式化；
g， 自动在e和f中切换
G， 自动在E和F中切换
%，显示百分比（默认显示小数点后6位）
 常用格式化：

1
2
3
4
5
6
7
8
9
10
11
12
13
14
15
16
17
18
19
20
21
22
23
24
25
26
27
28
29
tpl = "i am {}, age {}, {}".format("seven", 18, 'alex')
  
tpl = "i am {}, age {}, {}".format(*["seven", 18, 'alex'])
  
tpl = "i am {0}, age {1}, really {0}".format("seven", 18)
  
tpl = "i am {0}, age {1}, really {0}".format(*["seven", 18])
  
tpl = "i am {name}, age {age}, really {name}".format(name="seven", age=18)
  
tpl = "i am {name}, age {age}, really {name}".format(**{"name": "seven", "age": 18})
  
tpl = "i am {0[0]}, age {0[1]}, really {0[2]}".format([1, 2, 3], [11, 22, 33])
  
tpl = "i am {:s}, age {:d}, money {:f}".format("seven", 18, 88888.1)
  
tpl = "i am {:s}, age {:d}".format(*["seven", 18])
  
tpl = "i am {name:s}, age {age:d}".format(name="seven", age=18)
  
tpl = "i am {name:s}, age {age:d}".format(**{"name": "seven", "age": 18})
 
tpl = "numbers: {:b},{:o},{:d},{:x},{:X}, {:%}".format(15, 15, 15, 15, 15, 15.87623, 2)
 
tpl = "numbers: {:b},{:o},{:d},{:x},{:X}, {:%}".format(15, 15, 15, 15, 15, 15.87623, 2)
 
tpl = "numbers: {0:b},{0:o},{0:d},{0:x},{0:X}, {0:%}".format(15)
 
tpl = "numbers: {num:b},{num:o},{num:d},{num:x},{num:X}, {num:%}".format
